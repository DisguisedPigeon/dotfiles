# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen, KeyChord
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal

alt = "mod1"
mod = "mod4"
terminal = "kitty"

colors = {
            "focus":"#00ffff",
            "prim1":"#73349f",
            "prim2":"#4494d4",
            "bg":"#192049",
            "fg":"#DBE0FF"
        }


keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.

    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # will be to screen edge - window would shrink.
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "b", lazy.spawn("firefox"), desc="Launch browser"),
    Key([mod], "f", lazy.spawn("pcmanfm"), desc="Launch file manager"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([], "Print", lazy.spawn("scrot 'ArchBTW-%Y-%m-%d-%s.jpg' -e 'mv $f ~/screenshots/'")),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("amixer set Master 5%+"), desc="Raise volume"),
    Key([], "XF86AudioLowerVolume", lazy.spawn("amixer set Master 5%-"), desc="Lower volume"),
    Key([mod], "r", lazy.spawn("rofi -combi-modi window,drun,ssh -theme Arc-Dark -font 'hack 10' -show combi -icon-theme 'Arc' -show-icons"), desc="Launch manager"),

    KeyChord(
        [mod],
        "e",
        [
            Key([], "e", lazy.spawn("emacsclient -c -a ''"), desc="launch emacs"),
            Key([], "b", lazy.spawn("emacsclient -c -a '' --eval '(ibuffer)'"), desc="list open emacs buffers"),
            Key([], "d", lazy.spawn("emacsclient -c -a '' --eval '(dired nil)'"), desc="open emacs file manager"),
            Key([], "s", lazy.spawn("emacsclient -c -a '' --eval '(eshell)'"), desc="open emacs shell"),
        ],
        name="emacs"
    ),

    KeyChord(
        [mod, "shift"],
        "r",
        [
            Key([], "a", lazy.layout.grow()),
            Key([], "d", lazy.layout.shrink()),
            Key([], "s", lazy.layout.normalize()),
            Key([], "w", lazy.layout.maximize()),
            Key([], "h", lazy.layout.left(), desc="Move focus to left"),
            Key([], "l", lazy.layout.right(), desc="Move focus to right"),
            Key([], "j", lazy.layout.down(), desc="Move focus down"),
            Key([], "k", lazy.layout.up(), desc="Move focus up"),
            Key([], "space", lazy.layout.next(), desc="Move window focus to other window"),
        ],
        name="resize",
        mode=True,
    )
]

# ------------------DEFAULT GROUPS------------------

groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

# --------------------------------------------------
"""
custom_groups = [Group(i) for i in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]]
for i, val in enumerate(custom_groups):
    i += 1
    keys.extend(
        [
            Key(
                [mod],
                str(i),
                lazy.group[val].toscreen(),
                desc="Switch to group {}".format(val.name),
            ),
            Key(
                [mod, "shift"],
                str(i),
                lazy.window.togroup(val.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(val.name),
            ),
        ]
    )
"""
layouts = [
    # Try more layouts by unleashing below layouts.

    layout.MonadTall(border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.MonadWide(border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.Columns(border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.Stack(num_stacks=2, border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.Bsp(border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.Matrix(border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.RatioTile(border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.Tile(border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.TreeTab(border_width=2,single_margin=0, margin=5),
    layout.VerticalTile(border_width=2,single_margin=0, margin=5, border_focus = colors["focus"]),
    layout.Zoomy(border_width=2,single_margin=0, margin=5),
    layout.Max(),
]

widget_defaults = dict(
    font="Go-Mono Nerd Font",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.GroupBox(highlight_method='block', font='Hack Nerd Font', foreground=colors["fg"], background=colors["prim2"], this_current_screen_border = colors["prim1"], disable_drag=True),
                widget.TextBox(text='\ueb70', fontsize=32, padding=-4, foreground=colors["prim2"], background=colors["prim1"], font="Hack Nerd Font"),
                widget.Chord(background=colors["prim1"]),
                widget.TextBox(text='\ueb70', fontsize=32, padding=-4, foreground=colors["prim1"], font="Hack Nerd Font"),
                widget.Spacer(),
                widget.Systray(),
                widget.TextBox(text='\ueb6f',fontsize=32, padding=-4, foreground=colors["prim1"], font="Hack Nerd Font"),
                widget.CurrentLayout(background=colors["prim1"]),
                widget.TextBox(text='\ueb6f',fontsize=32, padding=-4, foreground=colors["prim2"], background=colors["prim1"], font="Hack Nerd Font"),
                widget.Net(format="\ueaa1 {up} \uea9a {down}", prefix='k', background=colors["prim2"]),
                widget.TextBox(text='\ueb6f',fontsize=32, padding=-4, foreground=colors["prim1"], background=colors["prim2"], font="Hack Nerd Font"),
                widget.PulseVolume(background=colors["prim1"], update_interval=0.1),
                widget.TextBox(text='\ueb6f',fontsize=32, padding=-4, foreground=colors["prim2"], background=colors["prim1"], font="Hack Nerd Font"),
                widget.Battery(background=colors["prim2"], format='{percent:2.0%}'),
                #widget.BatteryIcon(background=colors["prim2"], update_interval=1),
                widget.BatteryIcon(background=colors["prim2"], theme_path="~/.config/qtile/batteryicons", update_interval=1),
                widget.TextBox(text='\ueb6f',fontsize=32, padding=-4, foreground=colors["prim1"], background=colors["prim2"], font="Hack Nerd Font"),
                widget.Clock(format="%Y-%m-%d %a %H:%M %p", background=colors["prim1"]),
            ],
            24,
            background=colors["bg"],
            opacity=1,
            border_width=[0, 0, 0, 0],  # Draw top and bottom borders
            border_color=["ff00ff", "ff00ff", "ff00ff", "ff00ff"]  # Borders are magenta
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
